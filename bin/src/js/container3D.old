//this.createjs = this.createjs||{};
(function() {
 'use strict';
 	/**
	 * ...
	 * @author R Colvin
	 */
	///var scope;// SAME AS static dynamic var
	function Container3d( id) {
		this.Container_constructor();
		this.id=this.name=id;
		this.setup();
	}
	var p = createjs.extend(Container3d, createjs.Container);
	
	p.perspectiveProjection = {
		focalLength: 635,
		fieldOfView: 120,
		projectionCenter: {
		  x: 0,
		  y: 0
		}
	  };
	p.children = [];
	p.addChild = function(element){
		this.children.push(element);
		this.Container_addChild(element);
	  };
	
	p.setup = function() {
		/*var child = new createjs.Shape();
		child.z = 200;
		child.graphics.beginFill('#000');
		child.graphics.drawCircle(0, 0, 100);
		child.graphics.endFill();
		this.addChild(child);*/
		this.offset = Math.random()*10;
		this.count = 0;
	}
	
	/**
	* Sets the specified focal length.
	* Calculates Field of view if projectionPlane sizes are passed
	*
	* @method setFocalLength
	**/
	p.setFocalLength = function(value, projectionPlaneWidth, projectionPlaneHeight) {
		this.perspectiveProjection.focalLength = value;

		if (!(projectionPlaneWidth && projectionPlaneHeight)) return;

		var diagonal = Math.sqrt( Math.pow(projectionPlaneWidth, 2) + Math.pow(projectionPlaneHeight, 2) );
		this.perspectiveProjection.fieldOfView = 2 * Math.atan(diagonal / (2 * this.perspectiveProjection.focalLength)) * 180 / Math.PI;
	  };
	/**
	* Sets the specified field of view.
	* Calculates focal length if projectionPlane sizes are passed
	*
	* @method setFieldOfView
	**/
	p.setFieldOfView = function(value, projectionPlaneWidth, projectionPlaneHeight) {
		if (value <= 0 || value >= 180) throw new Error('field of view hast to be a value 0 and 180');
		 
		this.perspectiveProjection.fieldOfView = value;
		 
		if (!(projectionPlaneWidth && projectionPlaneHeight)) return;
		 
		var diagonal = Math.sqrt( Math.pow(projectionPlaneWidth, 2) + Math.pow(projectionPlaneHeight, 2) );
		this.perspectiveProjection.focalLength = diagonal / (2 * Math.tan(Math.PI * this.perspectiveProjection.fieldOfView / 360));
	};
	
  p.draw = function(ctx, ignoreCache) {
    var kids = this.children;
    for (var i=0,l=kids.length;i<l;i++) {
      var child = kids[i];

      if (child) {
        // Store values that user changed at runtime
        if (child.x != child._calculatedX) { child._storeX = child.x; changed = true; }
        if (child.y != child._calculatedY) { child._storeY = child.y; changed = true; }
        if (child.z != child._calculatedZ) { child._storeZ = child.z; changed = true; }
        if (child.scaleX != child._calculatedScaleX) { child._storeScaleX = child.scaleX; changed = true; }
        if (child.scaleY != child._calculatedScaleY) { child._storeScaleY = child.scaleY; changed = true; }

        if (changed) {
          // calculate scaling
          var scale = this.perspectiveProjection.focalLength / (this.perspectiveProjection.focalLength + child._storeZ || 0);

          // store newly calculated values
          child._calculatedZ = scale;
          child._calculatedX = this.perspectiveProjection.projectionCenter.x - (this.perspectiveProjection.projectionCenter.x - child._storeX) * scale;
          child._calculatedY = this.perspectiveProjection.projectionCenter.y - (this.perspectiveProjection.projectionCenter.y - child._storeY) * scale;

          child._calculatedScaleX = child._storeScaleX * scale;
          child._calculatedScaleY = child._storeScaleY * scale;

          child.scaleX = child._calculatedScaleX;
          child.scaleY = child._calculatedScaleY;
          child.x = child._calculatedX;
          child.y = child._calculatedY;

          //ctx.globalAlpha = child.alpha;
          ctx.beginPath();
          ctx.arc(child.x, child.y, child.radius * child.scaleX, 0, 2 * Math.PI, false);
          ctx.fillStyle = child.color;
          ctx.fill();
        }
      }
    }
  };
	
	
	createjs.Container3d = createjs.promote(Container3d, "Container");
	//createjs.Container3d = Container3d;
}());
//////END CLASS



/*
////////////use it with
var container = new Container3d();
var child = new createjs.Shape();
child.z = 200;
child.graphics.beginFill('#000');
child.graphics.drawCircle(0, 0, 100);
child.graphics.endFill();
container.perspectiveProjection.projectionCenter.x = stage.canvas.width / 2;
container.perspectiveProjection.projectionCenter.y = stage.canvas.height / 2;
container.setFieldOfView(90, canvas.width, canvas.height);
container.addChild(child);
*/